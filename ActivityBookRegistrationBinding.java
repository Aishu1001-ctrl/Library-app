// Generated by view binder compiler. Do not edit!
package com.example.library_app_java.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.library_app_java.R;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityBookRegistrationBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final EditText BookAuthor;

  @NonNull
  public final EditText BookID;

  @NonNull
  public final EditText BookName;

  @NonNull
  public final TextView BookTitle;

  @NonNull
  public final TextView addBookBackBtn;

  @NonNull
  public final MaterialButton bookAddBtn;

  @NonNull
  public final EditText publishedyear;

  @NonNull
  public final RadioButton radioAvailable;

  @NonNull
  public final RadioGroup radioGroupBookStatus;

  @NonNull
  public final RadioButton radioNotAvailable;

  @NonNull
  public final TextView textViewBookStatus;

  private ActivityBookRegistrationBinding(@NonNull RelativeLayout rootView,
      @NonNull EditText BookAuthor, @NonNull EditText BookID, @NonNull EditText BookName,
      @NonNull TextView BookTitle, @NonNull TextView addBookBackBtn,
      @NonNull MaterialButton bookAddBtn, @NonNull EditText publishedyear,
      @NonNull RadioButton radioAvailable, @NonNull RadioGroup radioGroupBookStatus,
      @NonNull RadioButton radioNotAvailable, @NonNull TextView textViewBookStatus) {
    this.rootView = rootView;
    this.BookAuthor = BookAuthor;
    this.BookID = BookID;
    this.BookName = BookName;
    this.BookTitle = BookTitle;
    this.addBookBackBtn = addBookBackBtn;
    this.bookAddBtn = bookAddBtn;
    this.publishedyear = publishedyear;
    this.radioAvailable = radioAvailable;
    this.radioGroupBookStatus = radioGroupBookStatus;
    this.radioNotAvailable = radioNotAvailable;
    this.textViewBookStatus = textViewBookStatus;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityBookRegistrationBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityBookRegistrationBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_book_registration, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityBookRegistrationBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.BookAuthor;
      EditText BookAuthor = ViewBindings.findChildViewById(rootView, id);
      if (BookAuthor == null) {
        break missingId;
      }

      id = R.id.BookID;
      EditText BookID = ViewBindings.findChildViewById(rootView, id);
      if (BookID == null) {
        break missingId;
      }

      id = R.id.BookName;
      EditText BookName = ViewBindings.findChildViewById(rootView, id);
      if (BookName == null) {
        break missingId;
      }

      id = R.id.BookTitle;
      TextView BookTitle = ViewBindings.findChildViewById(rootView, id);
      if (BookTitle == null) {
        break missingId;
      }

      id = R.id.add_book_back_btn;
      TextView addBookBackBtn = ViewBindings.findChildViewById(rootView, id);
      if (addBookBackBtn == null) {
        break missingId;
      }

      id = R.id.book_add_btn;
      MaterialButton bookAddBtn = ViewBindings.findChildViewById(rootView, id);
      if (bookAddBtn == null) {
        break missingId;
      }

      id = R.id.publishedyear;
      EditText publishedyear = ViewBindings.findChildViewById(rootView, id);
      if (publishedyear == null) {
        break missingId;
      }

      id = R.id.radio_Available;
      RadioButton radioAvailable = ViewBindings.findChildViewById(rootView, id);
      if (radioAvailable == null) {
        break missingId;
      }

      id = R.id.radio_group_book_status;
      RadioGroup radioGroupBookStatus = ViewBindings.findChildViewById(rootView, id);
      if (radioGroupBookStatus == null) {
        break missingId;
      }

      id = R.id.radio_NotAvailable;
      RadioButton radioNotAvailable = ViewBindings.findChildViewById(rootView, id);
      if (radioNotAvailable == null) {
        break missingId;
      }

      id = R.id.textView_Book_Status;
      TextView textViewBookStatus = ViewBindings.findChildViewById(rootView, id);
      if (textViewBookStatus == null) {
        break missingId;
      }

      return new ActivityBookRegistrationBinding((RelativeLayout) rootView, BookAuthor, BookID,
          BookName, BookTitle, addBookBackBtn, bookAddBtn, publishedyear, radioAvailable,
          radioGroupBookStatus, radioNotAvailable, textViewBookStatus);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
